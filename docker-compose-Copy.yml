version: "3.8"
services:
  orion:
    image: quay.io/fiware/orion-ld:${ORION_LD_VERSION}
    hostname: orion
    container_name: fiware-orion
    restart: always
    depends_on:
      - mongo-db
      - context
    networks:
      - default
    expose: 
      - "1026"
    ports:
      - "1026:1026"
    environment:
      - ORIONLD_TROE=TRUE
      - ORIONLD_TROE_USER=orion
      - ORIONLD_TROE_PWD=orion
      - ORIONLD_TROE_HOST=timescale-db
      - ORIONLD_MONGO_HOST=mongo-db
      - ORIONLD_MULTI_SERVICE=TRUE
      - ORIONLD_DISABLE_FILE_LOG=TRUE
    command: -dbhost mongo-db -logLevel ERROR -troePoolSize 10 -forwarding
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 10s

  mintaka:
    image: quay.io/fiware/mintaka:0.5.40
    hostname: mintaka
    container_name: fiware-mintaka
    restart: always
    depends_on:
      - timescale-db
    environment:
      - DATASOURCES_DEFAULT_HOST=timescale-db
      - DATASOURCES_DEFAULT_USERNAME=orion
      - DATASOURCES_DEFAULT_PASSWORD=orion
      - DATASOURCES_DEFAULT_DATABASE=orion
      - DATASOURCES_DEFAULT_MAXIMUM_POOL_SIZE=2
      - ENDPOINTS_INFO_ENABLED=true
      - ENDPOINTS_INFO_SENSITIVE=false
    expose:
      - "8080"
    ports:
      - "8080:8080"
    networks:
      - default

  timescale-db:
    image: timescale/timescaledb-postgis:1.7.5-pg12
    hostname: timescale-db
    container_name: db-timescale
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U orion" ]
      interval: 15s
      timeout: 15s
      retries: 5
#      start_period: 60s
    environment:
      - POSTGRES_USER=orion
      - POSTGRES_PASSWORD=orion
      - POSTGRES_HOST_AUTH_METHOD=trust
    command: ["postgres", "-c", "log_statement=none"]
    expose:
      - "5432"
    ports:
     - "5432:5432"
    networks:
      - default
    volumes:
      - timescale-db:/var/lib/postgresql/data

  iot-agent:
      image: quay.io/fiware/iotagent-json:latest
      hostname: iot-agent
      container_name: fiware-iot-agent
      depends_on:
        - mongo-db
        - mosquitto
        - context
      networks:
        - default
      expose:
        - '4041'
        - '7896'
      ports:
        - '4041:4041' # localhost:4041
        - '7896:7896'
      environment:
        - IOTA_CB_HOST=orion #
        - IOTA_CB_PORT=1026 
        - IOTA_NORTH_PORT=4041
        - IOTA_REGISTRY_TYPE=mongodb 
        - IOTA_LOG_LEVEL=DEBUG 
        - IOTA_TIMESTAMP=true 
        - IOTA_CB_NGSI_VERSION=ld 
        - IOTA_AUTOCAST=true 
        - IOTA_MONGO_HOST=mongo-db 
        - IOTA_MONGO_PORT=27017
        - IOTA_MONGO_DB=iotagentjson 
        - IOTA_MQTT_HOST=mosquitto 
        - IOTA_MQTT_PORT=1883
        - IOTA_DEFAULT_RESOURCE= #/iot/json # Default is blank. I'm using MQTT so I don't need a resource
        - IOTA_PROVIDER_URL=http://iot-agent:4041
        - IOTA_DEFAULT_TRANSPORT=MQTT
        - IOTA_FALLBACK_TENANT=openiot
        - IOTA_MULTI_CORE=true
        - IOTA_JSON_LD_CONTEXT=http://context:5051/ngsi-context.jsonld

  mosquitto:
    image: eclipse-mosquitto:1.6.14
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf

  topicbridge:
    image: danny0117/incode-heu-mqtt-topic-bridge:1.1.0
    hostname: topicbridge
    container_name: topicbridge 
    environment:
        - POLAR_H10_API_KEY=danishabbas2
        - MQTT_BROKER_NAME=mosquitto
        - MQTT_BROKER_PORT=1883
    depends_on:
      - mosquitto 

  context: 
    image: danny0117/incode-heu-contextfiles:1.04
    hostname: context
    container_name: context
    expose: 
      - '5051'
    ports:
      - '5051:5051'

  application: 
    image : danny0117/incode-heu-aa3-uc1:1.0.4-stable
    hostname: application
    container_name: application
    expose: 
      - '3002'
    ports:
      - '3002:3002'

  mongo-db:
    image: mongo:4.4
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
#      start_period: 5s
    
networks:
  default:
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  timescale-db: ~
  mongo-db: ~